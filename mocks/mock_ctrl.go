// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/hdl/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/hdl/interfaces.go -destination=mocks/mock_ctrl.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/JMURv/par-pro/products/pkg/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCtrl is a mock of Ctrl interface.
type MockCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlMockRecorder
}

// MockCtrlMockRecorder is the mock recorder for MockCtrl.
type MockCtrlMockRecorder struct {
	mock *MockCtrl
}

// NewMockCtrl creates a new mock instance.
func NewMockCtrl(ctrl *gomock.Controller) *MockCtrl {
	mock := &MockCtrl{ctrl: ctrl}
	mock.recorder = &MockCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCtrl) EXPECT() *MockCtrlMockRecorder {
	return m.recorder
}

// AddToFavorites mocks base method.
func (m *MockCtrl) AddToFavorites(ctx context.Context, uid, itemID uuid.UUID) (*model.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavorites", ctx, uid, itemID)
	ret0, _ := ret[0].(*model.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToFavorites indicates an expected call of AddToFavorites.
func (mr *MockCtrlMockRecorder) AddToFavorites(ctx, uid, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavorites", reflect.TypeOf((*MockCtrl)(nil).AddToFavorites), ctx, uid, itemID)
}

// CategoryFiltersSearch mocks base method.
func (m *MockCtrl) CategoryFiltersSearch(ctx context.Context, query string, page, size int) (*model.PaginatedFilterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryFiltersSearch", ctx, query, page, size)
	ret0, _ := ret[0].(*model.PaginatedFilterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryFiltersSearch indicates an expected call of CategoryFiltersSearch.
func (mr *MockCtrlMockRecorder) CategoryFiltersSearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryFiltersSearch", reflect.TypeOf((*MockCtrl)(nil).CategoryFiltersSearch), ctx, query, page, size)
}

// CategorySearch mocks base method.
func (m *MockCtrl) CategorySearch(ctx context.Context, query string, page, size int) (*model.PaginatedCategoryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategorySearch", ctx, query, page, size)
	ret0, _ := ret[0].(*model.PaginatedCategoryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategorySearch indicates an expected call of CategorySearch.
func (mr *MockCtrlMockRecorder) CategorySearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategorySearch", reflect.TypeOf((*MockCtrl)(nil).CategorySearch), ctx, query, page, size)
}

// CreateCategory mocks base method.
func (m *MockCtrl) CreateCategory(ctx context.Context, category *model.Category) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCtrlMockRecorder) CreateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCtrl)(nil).CreateCategory), ctx, category)
}

// CreateItem mocks base method.
func (m *MockCtrl) CreateItem(ctx context.Context, i *model.Item) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, i)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockCtrlMockRecorder) CreateItem(ctx, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockCtrl)(nil).CreateItem), ctx, i)
}

// CreatePromotion mocks base method.
func (m *MockCtrl) CreatePromotion(ctx context.Context, p *model.Promotion) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromotion", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromotion indicates an expected call of CreatePromotion.
func (mr *MockCtrlMockRecorder) CreatePromotion(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromotion", reflect.TypeOf((*MockCtrl)(nil).CreatePromotion), ctx, p)
}

// DeleteCategory mocks base method.
func (m *MockCtrl) DeleteCategory(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCtrlMockRecorder) DeleteCategory(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCtrl)(nil).DeleteCategory), ctx, slug)
}

// DeleteItem mocks base method.
func (m *MockCtrl) DeleteItem(ctx context.Context, uid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockCtrlMockRecorder) DeleteItem(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockCtrl)(nil).DeleteItem), ctx, uid)
}

// DeletePromotion mocks base method.
func (m *MockCtrl) DeletePromotion(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromotion", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePromotion indicates an expected call of DeletePromotion.
func (mr *MockCtrlMockRecorder) DeletePromotion(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromotion", reflect.TypeOf((*MockCtrl)(nil).DeletePromotion), ctx, slug)
}

// GetCategoryBySlug mocks base method.
func (m *MockCtrl) GetCategoryBySlug(ctx context.Context, slug string) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryBySlug", ctx, slug)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryBySlug indicates an expected call of GetCategoryBySlug.
func (mr *MockCtrlMockRecorder) GetCategoryBySlug(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryBySlug", reflect.TypeOf((*MockCtrl)(nil).GetCategoryBySlug), ctx, slug)
}

// GetItemByUUID mocks base method.
func (m *MockCtrl) GetItemByUUID(ctx context.Context, uid uuid.UUID) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByUUID", ctx, uid)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByUUID indicates an expected call of GetItemByUUID.
func (mr *MockCtrlMockRecorder) GetItemByUUID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByUUID", reflect.TypeOf((*MockCtrl)(nil).GetItemByUUID), ctx, uid)
}

// GetPromotion mocks base method.
func (m *MockCtrl) GetPromotion(ctx context.Context, slug string) (*model.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", ctx, slug)
	ret0, _ := ret[0].(*model.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockCtrlMockRecorder) GetPromotion(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockCtrl)(nil).GetPromotion), ctx, slug)
}

// HitItems mocks base method.
func (m *MockCtrl) HitItems(ctx context.Context, page, size int) (*model.PaginatedItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitItems", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HitItems indicates an expected call of HitItems.
func (mr *MockCtrlMockRecorder) HitItems(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitItems", reflect.TypeOf((*MockCtrl)(nil).HitItems), ctx, page, size)
}

// ItemAttrSearch mocks base method.
func (m *MockCtrl) ItemAttrSearch(ctx context.Context, query string, size, page int) (*model.PaginatedItemAttrData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemAttrSearch", ctx, query, size, page)
	ret0, _ := ret[0].(*model.PaginatedItemAttrData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemAttrSearch indicates an expected call of ItemAttrSearch.
func (mr *MockCtrlMockRecorder) ItemAttrSearch(ctx, query, size, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemAttrSearch", reflect.TypeOf((*MockCtrl)(nil).ItemAttrSearch), ctx, query, size, page)
}

// ItemSearch mocks base method.
func (m *MockCtrl) ItemSearch(ctx context.Context, query string, page, size int) (*model.PaginatedItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemSearch", ctx, query, page, size)
	ret0, _ := ret[0].(*model.PaginatedItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemSearch indicates an expected call of ItemSearch.
func (mr *MockCtrlMockRecorder) ItemSearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemSearch", reflect.TypeOf((*MockCtrl)(nil).ItemSearch), ctx, query, page, size)
}

// ListCategories mocks base method.
func (m *MockCtrl) ListCategories(ctx context.Context, page, size int) (*model.PaginatedCategoryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedCategoryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockCtrlMockRecorder) ListCategories(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCtrl)(nil).ListCategories), ctx, page, size)
}

// ListCategoryFilters mocks base method.
func (m *MockCtrl) ListCategoryFilters(ctx context.Context, slug string) ([]*model.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoryFilters", ctx, slug)
	ret0, _ := ret[0].([]*model.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoryFilters indicates an expected call of ListCategoryFilters.
func (mr *MockCtrlMockRecorder) ListCategoryFilters(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoryFilters", reflect.TypeOf((*MockCtrl)(nil).ListCategoryFilters), ctx, slug)
}

// ListCategoryItems mocks base method.
func (m *MockCtrl) ListCategoryItems(ctx context.Context, slug string, page, size int, filters map[string]any, sort string) (*model.PaginatedItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategoryItems", ctx, slug, page, size, filters, sort)
	ret0, _ := ret[0].(*model.PaginatedItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoryItems indicates an expected call of ListCategoryItems.
func (mr *MockCtrlMockRecorder) ListCategoryItems(ctx, slug, page, size, filters, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoryItems", reflect.TypeOf((*MockCtrl)(nil).ListCategoryItems), ctx, slug, page, size, filters, sort)
}

// ListFavorites mocks base method.
func (m *MockCtrl) ListFavorites(ctx context.Context, uid uuid.UUID) ([]*model.Favorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFavorites", ctx, uid)
	ret0, _ := ret[0].([]*model.Favorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFavorites indicates an expected call of ListFavorites.
func (mr *MockCtrlMockRecorder) ListFavorites(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFavorites", reflect.TypeOf((*MockCtrl)(nil).ListFavorites), ctx, uid)
}

// ListItems mocks base method.
func (m *MockCtrl) ListItems(ctx context.Context, page, size int) (*model.PaginatedItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItems", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockCtrlMockRecorder) ListItems(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockCtrl)(nil).ListItems), ctx, page, size)
}

// ListPromotionItems mocks base method.
func (m *MockCtrl) ListPromotionItems(ctx context.Context, slug string, page, size int) (*model.PaginatedPromoItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromotionItems", ctx, slug, page, size)
	ret0, _ := ret[0].(*model.PaginatedPromoItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromotionItems indicates an expected call of ListPromotionItems.
func (mr *MockCtrlMockRecorder) ListPromotionItems(ctx, slug, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromotionItems", reflect.TypeOf((*MockCtrl)(nil).ListPromotionItems), ctx, slug, page, size)
}

// ListPromotions mocks base method.
func (m *MockCtrl) ListPromotions(ctx context.Context, page, size int) (*model.PaginatedPromosData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromotions", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedPromosData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromotions indicates an expected call of ListPromotions.
func (mr *MockCtrlMockRecorder) ListPromotions(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromotions", reflect.TypeOf((*MockCtrl)(nil).ListPromotions), ctx, page, size)
}

// ListRelatedItems mocks base method.
func (m *MockCtrl) ListRelatedItems(ctx context.Context, uid uuid.UUID) ([]*model.RelatedProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelatedItems", ctx, uid)
	ret0, _ := ret[0].([]*model.RelatedProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelatedItems indicates an expected call of ListRelatedItems.
func (mr *MockCtrlMockRecorder) ListRelatedItems(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedItems", reflect.TypeOf((*MockCtrl)(nil).ListRelatedItems), ctx, uid)
}

// PromotionSearch mocks base method.
func (m *MockCtrl) PromotionSearch(ctx context.Context, query string, page, size int) (*model.PaginatedPromosData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromotionSearch", ctx, query, page, size)
	ret0, _ := ret[0].(*model.PaginatedPromosData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromotionSearch indicates an expected call of PromotionSearch.
func (mr *MockCtrlMockRecorder) PromotionSearch(ctx, query, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromotionSearch", reflect.TypeOf((*MockCtrl)(nil).PromotionSearch), ctx, query, page, size)
}

// RecItems mocks base method.
func (m *MockCtrl) RecItems(ctx context.Context, page, size int) (*model.PaginatedItemsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecItems", ctx, page, size)
	ret0, _ := ret[0].(*model.PaginatedItemsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecItems indicates an expected call of RecItems.
func (mr *MockCtrlMockRecorder) RecItems(ctx, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecItems", reflect.TypeOf((*MockCtrl)(nil).RecItems), ctx, page, size)
}

// RemoveFromFavorites mocks base method.
func (m *MockCtrl) RemoveFromFavorites(ctx context.Context, uid, itemID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromFavorites", ctx, uid, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromFavorites indicates an expected call of RemoveFromFavorites.
func (mr *MockCtrlMockRecorder) RemoveFromFavorites(ctx, uid, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromFavorites", reflect.TypeOf((*MockCtrl)(nil).RemoveFromFavorites), ctx, uid, itemID)
}

// UpdateCategory mocks base method.
func (m *MockCtrl) UpdateCategory(ctx context.Context, slug string, category *model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, slug, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCtrlMockRecorder) UpdateCategory(ctx, slug, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCtrl)(nil).UpdateCategory), ctx, slug, category)
}

// UpdateItem mocks base method.
func (m *MockCtrl) UpdateItem(ctx context.Context, uid uuid.UUID, i *model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, uid, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockCtrlMockRecorder) UpdateItem(ctx, uid, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockCtrl)(nil).UpdateItem), ctx, uid, i)
}

// UpdatePromotion mocks base method.
func (m *MockCtrl) UpdatePromotion(ctx context.Context, slug string, p *model.Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromotion", ctx, slug, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePromotion indicates an expected call of UpdatePromotion.
func (mr *MockCtrlMockRecorder) UpdatePromotion(ctx, slug, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromotion", reflect.TypeOf((*MockCtrl)(nil).UpdatePromotion), ctx, slug, p)
}
